syntax = "proto3";

package authorize;

option go_package = "github.com/autom8ter/protoc-gen-authorize/example/gen/example;example";

import "google/protobuf/empty.proto";
import "google/protobuf/struct.proto";
import "authorize/authorize.proto";

// Request is an example of a request object that would be passed into the authorize rules
message Request {
  string account_id = 1;
  string message = 2;
}

// User is an example of a user object that would be passed into the authorize rules
message User {
  string id = 1;
  string email = 2;
  string name = 3;
  repeated string account_ids = 4;
  repeated string roles = 5;
  bool is_super_admin = 6;
}

// Example service is an example of how to use the authorize rules
service ExampleService {
  // RequestMatch - Only super admins OR users with the admin role and access to the account id in the request will be allowed
  rpc RequestMatch(Request) returns (google.protobuf.Empty){
    option (authorize.rules) = {
      rules: [
        {
          expression: "user.AccountIds.includes(request.AccountId) && user.Roles.includes('admin')",
        },
        {
          expression: "user.IsSuperAdmin",
        }
      ]
    };
  }
  // MetadataMatch - Only super admins OR users with the admin role and access to the account id in the metadata will be allowed
  rpc MetadataMatch(Request) returns (google.protobuf.Empty){
    option (authorize.rules) = {
      rules: [
        {
          expression: "user.AccountIds.includes(metadata['x-account-id']) && user.Roles.includes('admin')",
        },
        {
          expression: "user.IsSuperAdmin",
        }
      ]
    };
  }
  // AllowAll is an example of how to configure a method to allow all requests (a single rule with a wildcard expression)
  rpc AllowAll(Request) returns (google.protobuf.Empty){
    option (authorize.rules) = {
      rules: [
        {
          expression: "*",
        }
      ]
    };
  }
}
